// script-main.js
console.log("‚úÖ script-main.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let totalQuestions = 0;
let answeredQuestions = 0;
let questionsData = []; // –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è

// === –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ ===
function renderQuestionCards(questions) {
    const container = document.getElementById('questions-container');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const validQuestions = questions.filter(isValidQuestion);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    totalQuestions = validQuestions.length;
    answeredQuestions = 0;
    questionsData = [...validQuestions]; // –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è

    console.log(`üéØ –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${validQuestions.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ ${questions.length}`);

    validQuestions.forEach(q => {
        let card;

        switch (q.type) {
            case 'single_choice':
                card = createSingleChoiceCard(q);
                break;
            case 'free_text':
                card = createFreeTextCard(q);
                break;
            case 'multiple_choice':
                card = createMultipleChoiceCard(q);
                break;
            case 'match':
                card = createMatchCard(q);
                break;
            case 'true_false':
                card = createTrueFalseCard(q);
                break;
            default:
                return; // –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        }

        container.appendChild(card);
    });

    updateProgressBar();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if (!document.querySelector('.submit-test-btn')) {
        const btn = document.createElement('button');
        btn.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç';
        btn.className = 'submit-test-btn';
        btn.onclick = showAllCorrectAnswers;
        container.appendChild(btn);
    }

    if (!document.getElementById('restart-test-btn')) {
        const restartBtn = document.createElement('button');
        restartBtn.id = 'restart-test-btn';
        restartBtn.textContent = '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ';
        restartBtn.className = 'submit-test-btn hidden';
        restartBtn.onclick = restartTest;
        container.appendChild(restartBtn);
    }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ===
function updateProgressBar() {
    const percent = totalQuestions === 0 ? 0 : (answeredQuestions / totalQuestions) * 100;
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');

    progressBar.style.width = percent + '%';
    progressText.textContent = `${answeredQuestions} / ${totalQuestions}`;
}

// === –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è ===
function showAllCorrectAnswers() {
    const answers = document.querySelectorAll('.correct-answer');
    const explanations = document.querySelectorAll('.explanation');

    answers.forEach(el => el.style.display = 'block');
    explanations.forEach((el, index) => {
        const explanationText = questionsData[index]?.explanation || '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.';
        el.textContent = 'üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ' + explanationText;
        el.style.marginTop = '0.75rem';
        el.style.color = '#555';
        el.style.fontSize = '0.95rem';
        el.style.fontStyle = 'italic';
    });

     // === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ===
  document.querySelectorAll('.question-card').forEach((card, index) => {
        const question = questionsData[index];
        if (!question) return;

        const correctAnswer = card.dataset.correctAnswer || 
                             (Array.isArray(card.dataset.correctAnswers) ? JSON.parse(card.dataset.correctAnswers)[0] : null);

        // –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏—â–µ–º label –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        card.querySelectorAll('label').forEach(label => {
            const input = label.querySelector('input');
            if (!input) return;

            const value = input.value;

            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
            label.classList.remove('correct-answer', 'wrong-answer');

            if (value === correctAnswer) {
                // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –∑–µ–ª—ë–Ω—ã–π
                label.classList.add('correct-answer');
            } else if (input.checked && value !== correctAnswer) {
                // –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π
                label.classList.add('wrong-answer');
            }
        });
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    const restartBtn = document.getElementById('restart-test-btn');
    restartBtn.classList.remove('hidden');
}

// === –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ===
function restartTest() {
    const container = document.getElementById('questions-container');
    container.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã

    answeredQuestions = 0;
    updateProgressBar();

    renderQuestionCards(questionsData); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    document.getElementById('restart-test-btn').classList.add('hidden');
    document.getElementById('progress-text').textContent = '0 / 0';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
 * @param {Object} q - –í–æ–ø—Ä–æ—Å
 * @returns {boolean} - true, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω
 */
function isValidQuestion(q) {
    if (!q || typeof q !== 'object') return false;
    if (!q.type || !q.question) return false;

    switch (q.type) {
        case 'single_choice':
            return Array.isArray(q.options) && 
                   q.options.length >= 2 &&
                   typeof q.correct_answer !== 'undefined' &&
                   q.options.includes(q.correct_answer);

        case 'multiple_choice':
            return Array.isArray(q.options) && 
                   q.options.length >= 2 &&
                   (Array.isArray(q.correct_answers) || Array.isArray(q.correct_answer));

        case 'free_text':
            return typeof q.correct_answer !== 'undefined';

        case 'match':
            return Array.isArray(q.left) && 
                   Array.isArray(q.right) && 
                   Array.isArray(q.correct_pairs) &&
                   q.left.length > 0 &&
                   q.right.length > 0 &&
                   q.correct_pairs.length > 0;

        case 'true_false':
            return typeof q.correct_answer === 'boolean';

        default:
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:', q.type);
            return false;
    }
}

console.log("–º—ç–π–Ω")