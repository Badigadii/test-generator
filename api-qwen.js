/**
 * 
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ Qwen –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {number} partNumber - –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏ (–¥–ª—è –ª–æ–≥–æ–≤)
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
 */
async function generateTestFromText(text, partNumber = 1) {
    console.log(`üöÄ [–ß–∞—Å—Ç—å ${partNumber}] –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...`);

    const API_KEY = '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';
    const ENDPOINT = 'https://openrouter.ai/api/v1/chat/completions ';

    const QUESTIONS_PER_CHUNK = 5;

const prompt = `
–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å. –°–æ–∑–¥–∞–π ${QUESTIONS_PER_CHUNK} –≤–æ–ø—Ä–æ—Å–∞(–æ–≤) –≤ —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∏–∫–∞–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤: single_choice, free_text, multiple_choice, match, true_false,
–î–ª—è match-–≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π –ø–æ–ª—è:
- "left": [...]
- "right": [...]
- "correct_pairs": [...]


–§–æ—Ä–º–∞—Ç:
{
  "questions": [
    {
      "type": "single_choice",
      "question": "...",
      "options": [...],
      "correct_answer": "..."
    }
  ]
}

–ü—Ä–∏–º–µ—Ä:
{
  "questions": [
    {
      "type": "single_choice",
      "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç '—Å—Ç–æ–ø'?",
      "options": ["–ó–µ–ª—ë–Ω—ã–π", "–ñ—ë–ª—Ç—ã–π", "–ö—Ä–∞—Å–Ω—ã–π"],
      "correct_answer": "–ö—Ä–∞—Å–Ω—ã–π"
    }
  ]
}

–¢–µ–∫—Å—Ç:
${text.slice(0, 10000)}
`.trim();
    const body = {
        model: "qwen/qwen3-235b-a22b", // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
        messages: [
            { role: "system", content: "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞" },
            { role: "user", content: prompt }
        ],
        temperature: 0.6,
        max_tokens: 8000
    };

    try {
        const response = await fetch(ENDPOINT, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå [–ß–∞—Å—Ç—å ${partNumber}] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:`, errorText);
            throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
        }

        const data = await response.json();

        const content = data.choices?.[0]?.message?.content?.trim();
        if (!content) {
            console.warn(`‚ö†Ô∏è [–ß–∞—Å—Ç—å ${partNumber}] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏`);
            return [];
        }

        console.log(`üí¨ [–ß–∞—Å—Ç—å ${partNumber}] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:\n`, content);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON
        const parsed = fixJSON(content);

        console.log(`‚úÖ [–ß–∞—Å—Ç—å ${partNumber}] JSON –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`, parsed);

        return parsed.questions || [];
    } catch (error) {
        console.error(`üö® [–ß–∞—Å—Ç—å ${partNumber}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:`, error.message);
        return [];
    }
}

function fixJSON(jsonString) {
    try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        return JSON.parse(jsonString);
    } catch (e) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...");

        // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –¥–æ –Ω–∞—á–∞–ª–∞ JSON
        let fixed = jsonString;

        // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –¥–æ { –∏–ª–∏ [
        const jsonStartIndex = fixed.indexOf('{');
        const jsonStartIndexArray = fixed.indexOf('[');
        const startIndex = Math.min(
            jsonStartIndex !== -1 ? jsonStartIndex : Infinity,
            jsonStartIndexArray !== -1 ? jsonStartIndexArray : Infinity
        );
        if (startIndex !== Infinity) {
            fixed = fixed.slice(startIndex);
        }

        // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ }
        let lastBraceIndex = fixed.lastIndexOf('}');
        if (lastBraceIndex !== -1) {
            fixed = fixed.slice(0, lastBraceIndex + 1);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
        if (fixed.trim().startsWith('[') && fixed.trim().endsWith(']')) {
            fixed = `{ "questions": ${fixed} }`;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–Ω–æ–≤–∞
        try {
            return JSON.parse(fixed);
        } catch (e2) {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON", e2);
            return { questions: [] };
        }
    }
}
console.log("–∞–ø–∏")